{"version":3,"sources":["containers/FirestoreCRUD/Investor/investors.style.js","containers/FirestoreCRUD/Investor/index.js"],"names":["TableWrapper","styled","Table","_templateObject","TitleWrapper","span","_templateObject2","palette","div","_templateObject3","ButtonHolders","_templateObject4","ComponentTitle","h3","_templateObject5","ActionBtn","Buttons","_templateObject6","Fieldset","_templateObject7","Label","label","_templateObject8","ActionWrapper","_templateObject9","Form","_templateObject10","Investors","handleRecord","actionName","investor","key","_this","props","saveIntoFireStore","resetRecords","resetFireStoreDocuments","handleModal","arguments","length","undefined","toggleModal","onRecordChange","event","clone","target","value","update","this","loadFromFireStore","_this2","_this$props","modalActive","investors","dataSource","Object","keys","map","index","push","objectSpread","columns","title","dataIndex","sorter","a","b","name","company_name","job_title","location","width","parseInt","investment_count","exists_count","render","text","row","react_default","createElement","onClick","bind","href","className","popconfirm","okText","cancelText","placement","onConfirm","layoutWrapper","box","contentHolder","style","marginTop","overflow","type","modal","visible","onClose","onOk","onCancel","input","placeholder","onChange","rowKey","rowSelection","selectedRowKeys","selectedRows","loading","isLoading","pagination","hideOnSinglePage","total","showTotal","range","concat","Component","connect","state","actions"],"mappings":"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","file":"static/js/53.ceea2491.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { palette } from 'styled-theme';\nimport Buttons from '../../../components/uielements/button';\nimport Table from '../../Tables/antTables/antTable.style';\n\nconst TableWrapper = styled(Table)`\n  .ant-table-bordered .ant-table-thead > tr > th,\n  .ant-table-bordered .ant-table-tbody > tr > td {\n    white-space: normal;\n    &.noWrapCell {\n      white-space: nowrap;\n    }\n\n    @media only screen and (max-width: 920px) {\n      white-space: nowrap;\n    }\n  }\n`;\n\nconst StatusTag = styled.span`\n  padding: 0 5px;\n  height: 20px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 2px;\n  background-color: ${palette('primary', 0)};\n  font-size: 12px;\n  color: #ffffff;\n  text-transform: capitalize;\n\n  &.draft {\n    background-color: ${palette('warning', 0)};\n  }\n\n  &.publish {\n    background-color: ${palette('success', 0)};\n  }\n`;\n\nconst TitleWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 20px;\n  flex-wrap: wrap;\n  align-items: center;\n`;\n\nconst ButtonHolders = styled.div``;\n\nconst ComponentTitle = styled.h3`\n  font-size: 16px;\n  font-weight: 500;\n  color: ${palette('text', 0)};\n  margin: 5px 0;\n`;\n\nconst ActionBtn = styled(Buttons)`\n  && {\n    padding: 0 12px;\n    margin-right: 15px;\n\n    &:last-child {\n      margin-right: 0;\n    }\n    i {\n      font-size: 17px;\n      color: ${palette('text', 1)};\n    }\n\n    &:hover {\n      i {\n        color: inherit;\n      }\n    }\n  }\n`;\n\nconst Fieldset = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst Label = styled.label`\n  font-size: 13px;\n  color: ${palette('text', 1)};\n  line-height: 1.5;\n  font-weight: 500;\n  padding: 0;\n  margin: 0 0 8px;\n`;\n\nconst ActionWrapper = styled.div`\n  display: flex;\n  align-content: center;\n\n  a {\n    margin-right: 12px;\n    &:last-child {\n      margin-right: 0;\n    }\n\n    i {\n      font-size: 18px;\n      color: ${palette('primary', 0)};\n\n      &:hover {\n        color: ${palette('primary', 4)};\n      }\n    }\n\n    &.deleteBtn {\n      i {\n        color: ${palette('error', 0)};\n\n        &:hover {\n          color: ${palette('error', 2)};\n        }\n      }\n    }\n  }\n`;\n\nconst Form = styled.div``;\n\nexport {\n  ActionBtn,\n  Fieldset,\n  Label,\n  Form,\n  TitleWrapper,\n  ButtonHolders,\n  ActionWrapper,\n  ComponentTitle,\n  TableWrapper,\n  StatusTag,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Input from '../../../components/uielements/input';\nimport Modal from '../../../components/feedback/modal';\nimport actions from '../../../redux/investors/actions';\nimport LayoutContentWrapper from '../../../components/utility/layoutWrapper.js';\nimport Box from '../../../components/utility/box';\nimport ContentHolder from '../../../components/utility/contentHolder';\nimport Popconfirms from '../../../components/feedback/popconfirm';\nimport {\n  ActionBtn,\n  Fieldset,\n  Form,\n  Label,\n  TitleWrapper,\n  ActionWrapper,\n  ComponentTitle,\n  TableWrapper,\n  ButtonHolders,\n} from './investors.style';\nimport clone from 'clone';\n\nclass Investors extends Component {\n  componentDidMount() {\n    this.props.loadFromFireStore();\n  }\n  handleRecord = (actionName, investor) => {\n    if (investor.key && actionName !== 'delete') actionName = 'update';\n    this.props.saveIntoFireStore(investor, actionName);\n  };\n  resetRecords = () => {\n    this.props.resetFireStoreDocuments();\n  };\n\n  handleModal = (investor = null) => {\n    this.props.toggleModal(investor);\n  };\n\n  onRecordChange = (key, event) => {\n    let { investor } = clone(this.props);\n    if (key) investor[key] = event.target.value;\n    this.props.update(investor);\n  };\n\n  render() {\n    const { modalActive, investors } = this.props;\n    const { investor } = clone(this.props);\n    const dataSource = [];\n    Object.keys(investors).map((investor, index) => {\n      return dataSource.push({\n        ...investors[investor],\n        key: investor,\n      });\n    });\n\n    const rowSelection = {\n      onChange: (selectedRowKeys, selectedRows) => {},\n    };\n\n    const columns = [\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n        sorter: (a, b) => {\n          if (a.name < b.name) return -1;\n          if (a.name > b.name) return 1;\n          return 0;\n        },\n      },\n      {\n        title: 'Company Name',\n        dataIndex: 'company_name',\n        key: 'company_name',\n        sorter: (a, b) => {\n          if (a.company_name < b.company_name) return -1;\n          if (a.company_name > b.company_name) return 1;\n          return 0;\n        },\n      },\n      {\n        title: 'Job Title',\n        dataIndex: 'job_title',\n        key: 'job_title',\n        sorter: (a, b) => {\n          if (a.job_title < b.job_title) return -1;\n          if (a.job_title > b.job_title) return 1;\n          return 0;\n        },\n      },\n      {\n        title: 'Location',\n        dataIndex: 'location',\n        key: 'location',\n        sorter: (a, b) => {\n          if (a.location < b.location) return -1;\n          if (a.location > b.location) return 1;\n          return 0;\n        },\n      },\n      {\n        title: 'Number of Investments',\n        dataIndex: 'investment_count',\n        key: 'investment_count',\n        width: '190px',\n        sorter: (a, b) =>\n          parseInt(a.investment_count, 10) - parseInt(b.investment_count, 10),\n      },\n      {\n        title: 'Number of Exists',\n        dataIndex: 'exists_count',\n        key: 'exists_count',\n        width: '160px',\n        sorter: (a, b) =>\n          parseInt(a.exists_count, 10) - parseInt(b.exists_count, 10),\n      },\n      {\n        title: 'Actions',\n        width: '60px',\n        key: 'action',\n        render: (text, row) => {\n          return (\n            <ActionWrapper>\n              <a onClick={this.handleModal.bind(this, row)} href=\"# \">\n                <i className=\"ion-android-create\" />\n              </a>\n\n              <Popconfirms\n                title=\"Are you sure to delete this record?\"\n                okText=\"Yes\"\n                cancelText=\"No\"\n                placement=\"topRight\"\n                onConfirm={this.handleRecord.bind(this, 'delete', row)}\n              >\n                <a className=\"deleteBtn\" href=\"# \">\n                  <i className=\"ion-android-delete\" />\n                </a>\n              </Popconfirms>\n            </ActionWrapper>\n          );\n        },\n      },\n    ];\n\n    return (\n      <LayoutContentWrapper>\n        <Box>\n          <ContentHolder style={{ marginTop: 0, overflow: 'hidden' }}>\n            <TitleWrapper>\n              <ComponentTitle>Investors</ComponentTitle>\n\n              <ButtonHolders>\n                <ActionBtn type=\"danger\" onClick={this.resetRecords}>\n                  Reset record\n                </ActionBtn>\n\n                <ActionBtn\n                  type=\"primary\"\n                  onClick={this.handleModal.bind(this, null)}\n                >\n                  Add new record\n                </ActionBtn>\n              </ButtonHolders>\n            </TitleWrapper>\n\n            <Modal\n              visible={modalActive}\n              onClose={this.props.toggleModal.bind(this, null)}\n              title={investor.key ? 'Update investor' : 'Add New investor'}\n              okText={investor.key ? 'Update investor' : 'Add investor'}\n              onOk={this.handleRecord.bind(this, 'insert', investor)}\n              onCancel={this.props.toggleModal.bind(this, null)}\n            >\n              <Form>\n                <Fieldset>\n                  <Label>Name</Label>\n                  <Input\n                    label=\"Name\"\n                    placeholder=\"Enter owner name\"\n                    value={investor.name}\n                    onChange={this.onRecordChange.bind(this, 'name')}\n                  />\n                </Fieldset>\n\n                <Fieldset>\n                  <Label>Company Name</Label>\n                  <Input\n                    label=\"Company Name\"\n                    placeholder=\"Enter the company name\"\n                    value={investor.company_name}\n                    onChange={this.onRecordChange.bind(this, 'company_name')}\n                  />\n                </Fieldset>\n\n                <Fieldset>\n                  <Label>Job TItle</Label>\n                  <Input\n                    label=\"Job Title\"\n                    placeholder=\"Enter the job title\"\n                    value={investor.job_title}\n                    onChange={this.onRecordChange.bind(this, 'job_title')}\n                  />\n                </Fieldset>\n\n                <Fieldset>\n                  <Label>Location</Label>\n                  <Input\n                    label=\"Location\"\n                    placeholder=\"Enter Description\"\n                    value={investor.location}\n                    onChange={this.onRecordChange.bind(this, 'location')}\n                  />\n                </Fieldset>\n\n                <Fieldset>\n                  <Label>Number of Investments</Label>\n                  <Input\n                    label=\"Number of Investments\"\n                    placeholder=\"Enter number of investments\"\n                    value={investor.investment_count}\n                    onChange={this.onRecordChange.bind(\n                      this,\n                      'investment_count'\n                    )}\n                  />\n                </Fieldset>\n\n                <Fieldset>\n                  <Label>Number of Exists</Label>\n                  <Input\n                    label=\"Number of Exists\"\n                    placeholder=\"Enter Number of Exists\"\n                    value={investor.exists_count}\n                    onChange={this.onRecordChange.bind(this, 'exists_count')}\n                  />\n                </Fieldset>\n              </Form>\n            </Modal>\n\n            <TableWrapper\n              rowKey=\"key\"\n              columns={columns}\n              rowSelection={rowSelection}\n              loading={this.props.isLoading}\n              dataSource={dataSource}\n              className=\"isoSimpleTable\"\n              pagination={{\n                // defaultPageSize: 1,\n                hideOnSinglePage: true,\n                total: dataSource.length,\n                showTotal: (total, range) => {\n                  return `Showing ${range[0]}-${range[1]} of ${\n                    dataSource.length\n                  } Results`;\n                },\n              }}\n            />\n          </ContentHolder>\n        </Box>\n      </LayoutContentWrapper>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    ...state.Investors,\n  }),\n  actions\n)(Investors);\n"],"sourceRoot":""}