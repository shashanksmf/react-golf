{"version":3,"sources":["containers/FirestoreCRUD/Investor/investors.style.js","containers/FirestoreCRUD/Investor/index.js"],"names":["TableWrapper","styled","Table","_templateObject","TitleWrapper","span","_templateObject2","palette","div","_templateObject3","ButtonHolders","_templateObject4","ComponentTitle","h3","_templateObject5","ActionBtn","Buttons","_templateObject6","Fieldset","_templateObject7","Label","label","_templateObject8","ActionWrapper","_templateObject9","Form","_templateObject10","Investors","handleRecord","actionName","investor","key","_this","props","saveIntoFireStore","resetRecords","resetFireStoreDocuments","handleModal","arguments","length","undefined","toggleModal","onRecordChange","event","clone","target","value","update","this","loadFromFireStore","_this2","_this$props","modalActive","investors","dataSource","Object","keys","map","index","push","objectSpread","columns","title","dataIndex","sorter","a","b","name","company_name","job_title","location","width","parseInt","investment_count","exists_count","render","text","row","react_default","createElement","onClick","bind","href","className","popconfirm","okText","cancelText","placement","onConfirm","layoutWrapper","box","contentHolder","style","marginTop","overflow","type","modal","visible","onClose","onOk","onCancel","input","placeholder","onChange","rowKey","rowSelection","selectedRowKeys","selectedRows","loading","isLoading","pagination","hideOnSinglePage","total","showTotal","range","concat","Component","connect","state","actions"],"mappings":"4kFAKA,IAAMA,EAAeC,YAAOC,IAAPD,CAAHE,KAmCZC,GArBYH,IAAOI,KAAVC,IAOOC,kBAAQ,UAAW,GAMjBA,kBAAQ,UAAW,GAInBA,kBAAQ,UAAW,IAItBN,IAAOO,IAAVC,MAQZC,EAAgBT,IAAOO,IAAVG,KAEbC,EAAiBX,IAAOY,GAAVC,IAGTP,kBAAQ,OAAQ,IAIrBQ,EAAYd,YAAOe,IAAPf,CAAHgB,IAUAV,kBAAQ,OAAQ,IAWzBW,EAAWjB,IAAOO,IAAVW,KAWRC,EAAQnB,IAAOoB,MAAVC,IAEAf,kBAAQ,OAAQ,IAOrBgB,EAAgBtB,IAAOO,IAAVgB,IAYJjB,kBAAQ,UAAW,GAGjBA,kBAAQ,UAAW,GAMnBA,kBAAQ,QAAS,GAGfA,kBAAQ,QAAS,IAO9BkB,EAAOxB,IAAOO,IAAVkB,sBC3GJC,6MAIJC,aAAe,SAACC,EAAYC,GACtBA,EAASC,KAAsB,WAAfF,IAAyBA,EAAa,UAC1DG,EAAKC,MAAMC,kBAAkBJ,EAAUD,MAEzCM,aAAe,WACbH,EAAKC,MAAMG,6BAGbC,YAAc,WAAqB,IAApBP,EAAoBQ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAT,KACxBN,EAAKC,MAAMQ,YAAYX,MAGzBY,eAAiB,SAACX,EAAKY,GAAU,IACzBb,EAAac,IAAMZ,EAAKC,OAAxBH,SACFC,IAAKD,EAASC,GAAOY,EAAME,OAAOC,OACtCd,EAAKC,MAAMc,OAAOjB,uFAjBlBkB,KAAKf,MAAMgB,qDAoBJ,IAAAC,EAAAF,KAAAG,EAC4BH,KAAKf,MAAhCmB,EADDD,EACCC,YAAaC,EADdF,EACcE,UACbvB,EAAac,IAAMI,KAAKf,OAAxBH,SACFwB,EAAa,GACnBC,OAAOC,KAAKH,GAAWI,IAAI,SAAC3B,EAAU4B,GACpC,OAAOJ,EAAWK,KAAXJ,OAAAK,EAAA,EAAAL,CAAA,GACFF,EAAUvB,GADR,CAELC,IAAKD,OAIT,IAIM+B,EAAU,CACd,CACEC,MAAO,OACPC,UAAW,OACXhC,IAAK,OACLiC,OAAQ,SAACC,EAAGC,GACV,OAAID,EAAEE,KAAOD,EAAEC,MAAc,EACzBF,EAAEE,KAAOD,EAAEC,KAAa,EACrB,IAGX,CACEL,MAAO,eACPC,UAAW,eACXhC,IAAK,eACLiC,OAAQ,SAACC,EAAGC,GACV,OAAID,EAAEG,aAAeF,EAAEE,cAAsB,EACzCH,EAAEG,aAAeF,EAAEE,aAAqB,EACrC,IAGX,CACEN,MAAO,YACPC,UAAW,YACXhC,IAAK,YACLiC,OAAQ,SAACC,EAAGC,GACV,OAAID,EAAEI,UAAYH,EAAEG,WAAmB,EACnCJ,EAAEI,UAAYH,EAAEG,UAAkB,EAC/B,IAGX,CACEP,MAAO,WACPC,UAAW,WACXhC,IAAK,WACLiC,OAAQ,SAACC,EAAGC,GACV,OAAID,EAAEK,SAAWJ,EAAEI,UAAkB,EACjCL,EAAEK,SAAWJ,EAAEI,SAAiB,EAC7B,IAGX,CACER,MAAO,wBACPC,UAAW,mBACXhC,IAAK,mBACLwC,MAAO,QACPP,OAAQ,SAACC,EAAGC,GAAJ,OACNM,SAASP,EAAEQ,iBAAkB,IAAMD,SAASN,EAAEO,iBAAkB,MAEpE,CACEX,MAAO,mBACPC,UAAW,eACXhC,IAAK,eACLwC,MAAO,QACPP,OAAQ,SAACC,EAAGC,GAAJ,OACNM,SAASP,EAAES,aAAc,IAAMF,SAASN,EAAEQ,aAAc,MAE5D,CACEZ,MAAO,UACPS,MAAO,OACPxC,IAAK,SACL4C,OAAQ,SAACC,EAAMC,GACb,OACEC,EAAAb,EAAAc,cAACxD,EAAD,KACEuD,EAAAb,EAAAc,cAAA,KAAGC,QAAS9B,EAAKb,YAAY4C,KAAK/B,EAAM2B,GAAMK,KAAK,MACjDJ,EAAAb,EAAAc,cAAA,KAAGI,UAAU,wBAGfL,EAAAb,EAAAc,cAACK,EAAA,EAAD,CACEtB,MAAM,sCACNuB,OAAO,MACPC,WAAW,KACXC,UAAU,WACVC,UAAWtC,EAAKtB,aAAaqD,KAAK/B,EAAM,SAAU2B,IAElDC,EAAAb,EAAAc,cAAA,KAAGI,UAAU,YAAYD,KAAK,MAC5BJ,EAAAb,EAAAc,cAAA,KAAGI,UAAU,6BAS3B,OACEL,EAAAb,EAAAc,cAACU,EAAA,QAAD,KACEX,EAAAb,EAAAc,cAACW,EAAA,QAAD,KACEZ,EAAAb,EAAAc,cAACY,EAAA,QAAD,CAAeC,MAAO,CAAEC,UAAW,EAAGC,SAAU,WAC9ChB,EAAAb,EAAAc,cAAC3E,EAAD,KACE0E,EAAAb,EAAAc,cAACnE,EAAD,kBAEAkE,EAAAb,EAAAc,cAACrE,EAAD,KACEoE,EAAAb,EAAAc,cAAChE,EAAD,CAAWgF,KAAK,SAASf,QAAShC,KAAKb,cAAvC,gBAIA2C,EAAAb,EAAAc,cAAChE,EAAD,CACEgF,KAAK,UACLf,QAAShC,KAAKX,YAAY4C,KAAKjC,KAAM,OAFvC,oBASJ8B,EAAAb,EAAAc,cAACiB,EAAA,EAAD,CACEC,QAAS7C,EACT8C,QAASlD,KAAKf,MAAMQ,YAAYwC,KAAKjC,KAAM,MAC3Cc,MAAOhC,EAASC,IAAM,kBAAoB,mBAC1CsD,OAAQvD,EAASC,IAAM,kBAAoB,eAC3CoE,KAAMnD,KAAKpB,aAAaqD,KAAKjC,KAAM,SAAUlB,GAC7CsE,SAAUpD,KAAKf,MAAMQ,YAAYwC,KAAKjC,KAAM,OAE5C8B,EAAAb,EAAAc,cAACtD,EAAD,KACEqD,EAAAb,EAAAc,cAAC7D,EAAD,KACE4D,EAAAb,EAAAc,cAAC3D,EAAD,aACA0D,EAAAb,EAAAc,cAACsB,EAAA,EAAD,CACEhF,MAAM,OACNiF,YAAY,mBACZxD,MAAOhB,EAASqC,KAChBoC,SAAUvD,KAAKN,eAAeuC,KAAKjC,KAAM,WAI7C8B,EAAAb,EAAAc,cAAC7D,EAAD,KACE4D,EAAAb,EAAAc,cAAC3D,EAAD,qBACA0D,EAAAb,EAAAc,cAACsB,EAAA,EAAD,CACEhF,MAAM,eACNiF,YAAY,yBACZxD,MAAOhB,EAASsC,aAChBmC,SAAUvD,KAAKN,eAAeuC,KAAKjC,KAAM,mBAI7C8B,EAAAb,EAAAc,cAAC7D,EAAD,KACE4D,EAAAb,EAAAc,cAAC3D,EAAD,kBACA0D,EAAAb,EAAAc,cAACsB,EAAA,EAAD,CACEhF,MAAM,YACNiF,YAAY,sBACZxD,MAAOhB,EAASuC,UAChBkC,SAAUvD,KAAKN,eAAeuC,KAAKjC,KAAM,gBAI7C8B,EAAAb,EAAAc,cAAC7D,EAAD,KACE4D,EAAAb,EAAAc,cAAC3D,EAAD,iBACA0D,EAAAb,EAAAc,cAACsB,EAAA,EAAD,CACEhF,MAAM,WACNiF,YAAY,oBACZxD,MAAOhB,EAASwC,SAChBiC,SAAUvD,KAAKN,eAAeuC,KAAKjC,KAAM,eAI7C8B,EAAAb,EAAAc,cAAC7D,EAAD,KACE4D,EAAAb,EAAAc,cAAC3D,EAAD,8BACA0D,EAAAb,EAAAc,cAACsB,EAAA,EAAD,CACEhF,MAAM,wBACNiF,YAAY,8BACZxD,MAAOhB,EAAS2C,iBAChB8B,SAAUvD,KAAKN,eAAeuC,KAC5BjC,KACA,uBAKN8B,EAAAb,EAAAc,cAAC7D,EAAD,KACE4D,EAAAb,EAAAc,cAAC3D,EAAD,yBACA0D,EAAAb,EAAAc,cAACsB,EAAA,EAAD,CACEhF,MAAM,mBACNiF,YAAY,yBACZxD,MAAOhB,EAAS4C,aAChB6B,SAAUvD,KAAKN,eAAeuC,KAAKjC,KAAM,qBAMjD8B,EAAAb,EAAAc,cAAC/E,EAAD,CACEwG,OAAO,MACP3C,QAASA,EACT4C,aA3LW,CACnBF,SAAU,SAACG,EAAiBC,MA2LpBC,QAAS5D,KAAKf,MAAM4E,UACpBvD,WAAYA,EACZ6B,UAAU,iBACV2B,WAAY,CAEVC,kBAAkB,EAClBC,MAAO1D,EAAWf,OAClB0E,UAAW,SAACD,EAAOE,GACjB,iBAAAC,OAAkBD,EAAM,GAAxB,KAAAC,OAA8BD,EAAM,GAApC,QAAAC,OACE7D,EAAWf,OADb,0BArOM6E,aAkPTC,sBACb,SAAAC,GAAK,OAAA/D,OAAAK,EAAA,EAAAL,CAAA,GACA+D,EAAM3F,YAEX4F,IAJaF,CAKb1F","file":"static/js/54.a31414a0.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nimport { palette } from 'styled-theme';\r\nimport Buttons from '../../../components/uielements/button';\r\nimport Table from '../../Tables/antTables/antTable.style';\r\n\r\nconst TableWrapper = styled(Table)`\r\n  .ant-table-bordered .ant-table-thead > tr > th,\r\n  .ant-table-bordered .ant-table-tbody > tr > td {\r\n    white-space: normal;\r\n    &.noWrapCell {\r\n      white-space: nowrap;\r\n    }\r\n\r\n    @media only screen and (max-width: 920px) {\r\n      white-space: nowrap;\r\n    }\r\n  }\r\n`;\r\n\r\nconst StatusTag = styled.span`\r\n  padding: 0 5px;\r\n  height: 20px;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 2px;\r\n  background-color: ${palette('primary', 0)};\r\n  font-size: 12px;\r\n  color: #ffffff;\r\n  text-transform: capitalize;\r\n\r\n  &.draft {\r\n    background-color: ${palette('warning', 0)};\r\n  }\r\n\r\n  &.publish {\r\n    background-color: ${palette('success', 0)};\r\n  }\r\n`;\r\n\r\nconst TitleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 20px;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n`;\r\n\r\nconst ButtonHolders = styled.div``;\r\n\r\nconst ComponentTitle = styled.h3`\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: ${palette('text', 0)};\r\n  margin: 5px 0;\r\n`;\r\n\r\nconst ActionBtn = styled(Buttons)`\r\n  && {\r\n    padding: 0 12px;\r\n    margin-right: 15px;\r\n\r\n    &:last-child {\r\n      margin-right: 0;\r\n    }\r\n    i {\r\n      font-size: 17px;\r\n      color: ${palette('text', 1)};\r\n    }\r\n\r\n    &:hover {\r\n      i {\r\n        color: inherit;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Fieldset = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 20px;\r\n\r\n  &:last-child {\r\n    margin-bottom: 0;\r\n  }\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 13px;\r\n  color: ${palette('text', 1)};\r\n  line-height: 1.5;\r\n  font-weight: 500;\r\n  padding: 0;\r\n  margin: 0 0 8px;\r\n`;\r\n\r\nconst ActionWrapper = styled.div`\r\n  display: flex;\r\n  align-content: center;\r\n\r\n  a {\r\n    margin-right: 12px;\r\n    &:last-child {\r\n      margin-right: 0;\r\n    }\r\n\r\n    i {\r\n      font-size: 18px;\r\n      color: ${palette('primary', 0)};\r\n\r\n      &:hover {\r\n        color: ${palette('primary', 4)};\r\n      }\r\n    }\r\n\r\n    &.deleteBtn {\r\n      i {\r\n        color: ${palette('error', 0)};\r\n\r\n        &:hover {\r\n          color: ${palette('error', 2)};\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Form = styled.div``;\r\n\r\nexport {\r\n  ActionBtn,\r\n  Fieldset,\r\n  Label,\r\n  Form,\r\n  TitleWrapper,\r\n  ButtonHolders,\r\n  ActionWrapper,\r\n  ComponentTitle,\r\n  TableWrapper,\r\n  StatusTag,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Input from '../../../components/uielements/input';\r\nimport Modal from '../../../components/feedback/modal';\r\nimport actions from '../../../redux/investors/actions';\r\nimport LayoutContentWrapper from '../../../components/utility/layoutWrapper.js';\r\nimport Box from '../../../components/utility/box';\r\nimport ContentHolder from '../../../components/utility/contentHolder';\r\nimport Popconfirms from '../../../components/feedback/popconfirm';\r\nimport {\r\n  ActionBtn,\r\n  Fieldset,\r\n  Form,\r\n  Label,\r\n  TitleWrapper,\r\n  ActionWrapper,\r\n  ComponentTitle,\r\n  TableWrapper,\r\n  ButtonHolders,\r\n} from './investors.style';\r\nimport clone from 'clone';\r\n\r\nclass Investors extends Component {\r\n  componentDidMount() {\r\n    this.props.loadFromFireStore();\r\n  }\r\n  handleRecord = (actionName, investor) => {\r\n    if (investor.key && actionName !== 'delete') actionName = 'update';\r\n    this.props.saveIntoFireStore(investor, actionName);\r\n  };\r\n  resetRecords = () => {\r\n    this.props.resetFireStoreDocuments();\r\n  };\r\n\r\n  handleModal = (investor = null) => {\r\n    this.props.toggleModal(investor);\r\n  };\r\n\r\n  onRecordChange = (key, event) => {\r\n    let { investor } = clone(this.props);\r\n    if (key) investor[key] = event.target.value;\r\n    this.props.update(investor);\r\n  };\r\n\r\n  render() {\r\n    const { modalActive, investors } = this.props;\r\n    const { investor } = clone(this.props);\r\n    const dataSource = [];\r\n    Object.keys(investors).map((investor, index) => {\r\n      return dataSource.push({\r\n        ...investors[investor],\r\n        key: investor,\r\n      });\r\n    });\r\n\r\n    const rowSelection = {\r\n      onChange: (selectedRowKeys, selectedRows) => {},\r\n    };\r\n\r\n    const columns = [\r\n      {\r\n        title: 'Name',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        sorter: (a, b) => {\r\n          if (a.name < b.name) return -1;\r\n          if (a.name > b.name) return 1;\r\n          return 0;\r\n        },\r\n      },\r\n      {\r\n        title: 'Company Name',\r\n        dataIndex: 'company_name',\r\n        key: 'company_name',\r\n        sorter: (a, b) => {\r\n          if (a.company_name < b.company_name) return -1;\r\n          if (a.company_name > b.company_name) return 1;\r\n          return 0;\r\n        },\r\n      },\r\n      {\r\n        title: 'Job Title',\r\n        dataIndex: 'job_title',\r\n        key: 'job_title',\r\n        sorter: (a, b) => {\r\n          if (a.job_title < b.job_title) return -1;\r\n          if (a.job_title > b.job_title) return 1;\r\n          return 0;\r\n        },\r\n      },\r\n      {\r\n        title: 'Location',\r\n        dataIndex: 'location',\r\n        key: 'location',\r\n        sorter: (a, b) => {\r\n          if (a.location < b.location) return -1;\r\n          if (a.location > b.location) return 1;\r\n          return 0;\r\n        },\r\n      },\r\n      {\r\n        title: 'Number of Investments',\r\n        dataIndex: 'investment_count',\r\n        key: 'investment_count',\r\n        width: '190px',\r\n        sorter: (a, b) =>\r\n          parseInt(a.investment_count, 10) - parseInt(b.investment_count, 10),\r\n      },\r\n      {\r\n        title: 'Number of Exists',\r\n        dataIndex: 'exists_count',\r\n        key: 'exists_count',\r\n        width: '160px',\r\n        sorter: (a, b) =>\r\n          parseInt(a.exists_count, 10) - parseInt(b.exists_count, 10),\r\n      },\r\n      {\r\n        title: 'Actions',\r\n        width: '60px',\r\n        key: 'action',\r\n        render: (text, row) => {\r\n          return (\r\n            <ActionWrapper>\r\n              <a onClick={this.handleModal.bind(this, row)} href=\"# \">\r\n                <i className=\"ion-android-create\" />\r\n              </a>\r\n\r\n              <Popconfirms\r\n                title=\"Are you sure to delete this record?\"\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n                placement=\"topRight\"\r\n                onConfirm={this.handleRecord.bind(this, 'delete', row)}\r\n              >\r\n                <a className=\"deleteBtn\" href=\"# \">\r\n                  <i className=\"ion-android-delete\" />\r\n                </a>\r\n              </Popconfirms>\r\n            </ActionWrapper>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n\r\n    return (\r\n      <LayoutContentWrapper>\r\n        <Box>\r\n          <ContentHolder style={{ marginTop: 0, overflow: 'hidden' }}>\r\n            <TitleWrapper>\r\n              <ComponentTitle>Investors</ComponentTitle>\r\n\r\n              <ButtonHolders>\r\n                <ActionBtn type=\"danger\" onClick={this.resetRecords}>\r\n                  Reset record\r\n                </ActionBtn>\r\n\r\n                <ActionBtn\r\n                  type=\"primary\"\r\n                  onClick={this.handleModal.bind(this, null)}\r\n                >\r\n                  Add new record\r\n                </ActionBtn>\r\n              </ButtonHolders>\r\n            </TitleWrapper>\r\n\r\n            <Modal\r\n              visible={modalActive}\r\n              onClose={this.props.toggleModal.bind(this, null)}\r\n              title={investor.key ? 'Update investor' : 'Add New investor'}\r\n              okText={investor.key ? 'Update investor' : 'Add investor'}\r\n              onOk={this.handleRecord.bind(this, 'insert', investor)}\r\n              onCancel={this.props.toggleModal.bind(this, null)}\r\n            >\r\n              <Form>\r\n                <Fieldset>\r\n                  <Label>Name</Label>\r\n                  <Input\r\n                    label=\"Name\"\r\n                    placeholder=\"Enter owner name\"\r\n                    value={investor.name}\r\n                    onChange={this.onRecordChange.bind(this, 'name')}\r\n                  />\r\n                </Fieldset>\r\n\r\n                <Fieldset>\r\n                  <Label>Company Name</Label>\r\n                  <Input\r\n                    label=\"Company Name\"\r\n                    placeholder=\"Enter the company name\"\r\n                    value={investor.company_name}\r\n                    onChange={this.onRecordChange.bind(this, 'company_name')}\r\n                  />\r\n                </Fieldset>\r\n\r\n                <Fieldset>\r\n                  <Label>Job TItle</Label>\r\n                  <Input\r\n                    label=\"Job Title\"\r\n                    placeholder=\"Enter the job title\"\r\n                    value={investor.job_title}\r\n                    onChange={this.onRecordChange.bind(this, 'job_title')}\r\n                  />\r\n                </Fieldset>\r\n\r\n                <Fieldset>\r\n                  <Label>Location</Label>\r\n                  <Input\r\n                    label=\"Location\"\r\n                    placeholder=\"Enter Description\"\r\n                    value={investor.location}\r\n                    onChange={this.onRecordChange.bind(this, 'location')}\r\n                  />\r\n                </Fieldset>\r\n\r\n                <Fieldset>\r\n                  <Label>Number of Investments</Label>\r\n                  <Input\r\n                    label=\"Number of Investments\"\r\n                    placeholder=\"Enter number of investments\"\r\n                    value={investor.investment_count}\r\n                    onChange={this.onRecordChange.bind(\r\n                      this,\r\n                      'investment_count'\r\n                    )}\r\n                  />\r\n                </Fieldset>\r\n\r\n                <Fieldset>\r\n                  <Label>Number of Exists</Label>\r\n                  <Input\r\n                    label=\"Number of Exists\"\r\n                    placeholder=\"Enter Number of Exists\"\r\n                    value={investor.exists_count}\r\n                    onChange={this.onRecordChange.bind(this, 'exists_count')}\r\n                  />\r\n                </Fieldset>\r\n              </Form>\r\n            </Modal>\r\n\r\n            <TableWrapper\r\n              rowKey=\"key\"\r\n              columns={columns}\r\n              rowSelection={rowSelection}\r\n              loading={this.props.isLoading}\r\n              dataSource={dataSource}\r\n              className=\"isoSimpleTable\"\r\n              pagination={{\r\n                // defaultPageSize: 1,\r\n                hideOnSinglePage: true,\r\n                total: dataSource.length,\r\n                showTotal: (total, range) => {\r\n                  return `Showing ${range[0]}-${range[1]} of ${\r\n                    dataSource.length\r\n                  } Results`;\r\n                },\r\n              }}\r\n            />\r\n          </ContentHolder>\r\n        </Box>\r\n      </LayoutContentWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n    ...state.Investors,\r\n  }),\r\n  actions\r\n)(Investors);\r\n"],"sourceRoot":""}