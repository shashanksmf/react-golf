{"version":3,"sources":["containers/Charts/reactChart2/components/randomizedLine/randomizedConfig.js","containers/Charts/reactChart2/components/randomizedLine/randomizedLine.js"],"names":["initialData","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","Graph","this","setState","_this","setInterval","state","newData","newData2","x","length","push","Math","floor","random","react_default","a","createElement","es","Component","randomizedLine_Graph"],"mappings":"0KAAMA,EAAc,CAClBC,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,QACjEC,SAAU,CACR,CACEC,MAAO,mBACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,uBACjBC,YAAa,qBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBC,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAEjC,CACElB,MAAO,oBACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,uBACjBC,YAAa,qBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBC,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,iDCvC/BC,+LAEFC,KAAKC,SAASxB,+CAGd,IAAMyB,EAAQF,KACdG,YAAY,WAIV,IAJgB,IACRxB,EAAauB,EAAME,MAAnBzB,SACJ0B,EAAU,GACVC,EAAW,GACNC,EAAI,EAAGA,EAAIL,EAAME,MAAM1B,OAAO8B,OAAQD,IAC7CF,EAAQI,KAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,WAC7BN,EAASG,KAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,WAEhCjC,EAAS,GAAGmB,KAAOO,EACnB1B,EAAS,GAAGmB,KAAOQ,EACnBJ,EAAMD,SAAS,CAAEtB,cAChB,sCAGH,OAAOkC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMlB,KAAME,KAAKI,eApBRa,gMA0BhB,OAAOJ,EAAAC,EAAAC,cAACG,EAAD,aAFkBD","file":"static/js/ReactChart2-randomizedLine.7470abd0.chunk.js","sourcesContent":["const initialData = {\r\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n  datasets: [\r\n    {\r\n      label: 'My First dataset',\r\n      fill: false,\r\n      lineTension: 0.1,\r\n      backgroundColor: 'rgba(75,192,192,0.4)',\r\n      borderColor: 'rgba(75,192,192,1)',\r\n      borderCapStyle: 'butt',\r\n      borderDash: [],\r\n      borderDashOffset: 0.0,\r\n      borderJoinStyle: 'miter',\r\n      pointBorderColor: 'rgba(75,192,192,1)',\r\n      pointBackgroundColor: '#fff',\r\n      pointBorderWidth: 1,\r\n      pointHoverRadius: 5,\r\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n      pointHoverBorderWidth: 2,\r\n      pointRadius: 1,\r\n      pointHitRadius: 10,\r\n      data: [65, 59, 80, 81, 56, 55, 40]\r\n    },\r\n    {\r\n      label: 'My Second dataset',\r\n      fill: false,\r\n      lineTension: 0.1,\r\n      backgroundColor: 'rgba(72,166,242,0.4)',\r\n      borderColor: 'rgba(72,166,242,1)',\r\n      borderCapStyle: 'butt',\r\n      borderDash: [],\r\n      borderDashOffset: 0.0,\r\n      borderJoinStyle: 'miter',\r\n      pointBorderColor: 'rgba(72,166,242,1)',\r\n      pointBackgroundColor: '#fff',\r\n      pointBorderWidth: 1,\r\n      pointHoverRadius: 5,\r\n      pointHoverBackgroundColor: 'rgba(72,166,242,1)',\r\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n      pointHoverBorderWidth: 2,\r\n      pointRadius: 1,\r\n      pointHitRadius: 10,\r\n      data: [55, 49, 70, 71, 46, 45, 30]\r\n    },\r\n  ]\r\n};\r\n\r\n\r\nexport {\r\n  initialData,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { initialData } from './randomizedConfig';\r\n\r\nclass Graph extends Component {\r\n  componentWillMount() {\r\n    this.setState(initialData);\r\n  }\r\n  componentDidMount() {\r\n    const _this = this;\r\n    setInterval(() => {\r\n      const { datasets } = _this.state;\r\n      let newData = [];\r\n      let newData2 = [];\r\n      for (let x = 0; x < _this.state.labels.length; x++) {\r\n        newData.push(Math.floor(Math.random() * 100));\r\n        newData2.push(Math.floor(Math.random() * 100));\r\n      }\r\n      datasets[0].data = newData;\r\n      datasets[1].data = newData2;\r\n      _this.setState({ datasets });\r\n    }, 3000);\r\n  }\r\n  render() {\r\n    return <Line data={this.state} />;\r\n  }\r\n}\r\n\r\nexport default class extends Component {\r\n  render() {\r\n    return <Graph />;\r\n  }\r\n}\r\n"],"sourceRoot":""}